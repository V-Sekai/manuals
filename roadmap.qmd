---
title: "Roadmap"
format: 
  html:
    page-layout: full
---

```{python}
#| label: roadmap
#| echo: false
#| output: asis

import vote
import pandas as pd
from itables import init_notebook_mode, show

init_notebook_mode(all_interactive=False)

results = vote.run_election('./roadmap/votes', 1, "./roadmap/tasks.csv")

df = results["avg_table"]

# Keep non-archived tasks only
df = df[df['Archived_on'].isna()]

if "Archived_on" in df.columns:
    df = df.drop(columns=["Archived_on"])

# Reorder columns
df = df[["Category","Task","Priority","Notes"]]

# Move high priority to top
df["highpriority"] = df["Task"].apply(lambda x: 0 if x in results["winners"] else 1)
df = df.sort_values(by="highpriority").drop(columns=["highpriority"])
df.reset_index(drop=True, inplace=True)

df.loc[df["Task"].isin(results["winners"]), "Task"] += " - ðŸš¨ (High Priority)"

print("""

## Feature List

Features with ðŸš¨ symbol were voted as top priority with Proportional Star Voting. Priority column is an average of votes for every feature.

""")
show(df, paging=True, pageLength=50)

print("""
## Archived Tasks

Archived tasks

<details>
<summary>Show archived tasks</summary>
""")

archived_tasks_df = vote.get_archived_tasks_table('./roadmap/tasks.csv')
archived_tasks_df["Notes"] = archived_tasks_df["Notes"].fillna("")
archived_tasks_df.reset_index(drop=True, inplace=True)

show(archived_tasks_df)

print("""
</details>
""")

print("""

## Raw Votes

<details>
<summary>Show raw votes table</summary>

Raw votes count

""")

votes_dict = vote.get_votes('./roadmap/votes')
votes_df = pd.DataFrame(votes_dict)
votes_df = votes_df.fillna(0)
show(votes_df, paging=False)

print("""
</details>
""")
```
