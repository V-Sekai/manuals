---
title: "Changes to V-Sekai"
toc: true
---

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/), and this project does **not** adhere to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

**Added** for new features.

**Changed** for changes in existing functionality.

**Deprecated** for soon-to-be removed features.

**Removed** for now removed features.

**Fixed** for any bug fixes.

**Security** in case of vulnerabilities.

```{python}
#| echo: false
#| output: asis

import glob
import pandas as pd
from itables import show
import os
import sys
import subprocess

# Install readtime if not already installed
try:
    import readtime
except ImportError:
    subprocess.check_call([sys.executable, "-m", "pip", "install", "readtime"])
    import readtime

# Collect all markdown files in changelog
files = [f for f in glob.glob("changelog/**/*.md", recursive=True)]

def estimate_reading_time(filepath):
    with open(filepath, encoding="utf-8") as f:
        text = f.read()
    result = readtime.of_text(text)
    return result.text  # e.g., "1 min read"

def extract_h1_title(filepath):
    with open(filepath, encoding="utf-8") as f:
        for line in f:
            line = line.strip()
            if line.startswith("# "):
                return line[2:].strip()
    # fallback to filename if no H1 found
    return os.path.splitext(os.path.basename(filepath))[0]

def shorten_title(title, length=40):
    return title if len(title) <= length else title[:length-3] + "..."

rows = []
for f in files:
    h1_title = extract_h1_title(f)
    short_title = shorten_title(h1_title)
    reading_time = estimate_reading_time(f)
    filename = os.path.basename(f)
    year = filename[:4] if filename[:4].isdigit() else ""
    html_filename = filename.replace('.md', '.html')
    if year:
        url = f"https://v-sekai.github.io/manuals/changelog/{year}/{html_filename}"
    else:
        url = f"https://v-sekai.github.io/manuals/changelog/{html_filename}"
    link = f'<a href="{url}">{short_title}</a>'
    rows.append({"title": link, "reading-time": reading_time, "filename": filename,})

columns = ["title", "reading-time", "filename"]
df = pd.DataFrame(rows, columns=columns)
if not df.empty:
    df = df.sort_values("filename", ascending=False)

show(df, paging=True, pageLength=10, index=False, escape=False)
```